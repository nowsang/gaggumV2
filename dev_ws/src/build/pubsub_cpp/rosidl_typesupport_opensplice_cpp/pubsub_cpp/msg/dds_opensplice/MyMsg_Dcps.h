//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: MyMsg_Dcps.h
//  Source: pubsub_cpp\msg\MyMsg_.idl
//  Generated: timestamp removed to make the build reproducible
//  OpenSplice 6.9.190403OSS
//  
//******************************************************************
#ifndef _MYMSG_DCPS_H_
#define _MYMSG_DCPS_H_

#include "sacpp_mapping.h"
#include "MyMsg_.h"
#include "dds_dcps.h"
#include "pubsub_cpp/msg/rosidl_typesupport_opensplice_cpp__visibility_control.h"


namespace pubsub_cpp
{
   namespace msg
   {
      namespace dds_
      {

         class ROSIDL_TYPESUPPORT_OPENSPLICE_CPP_PUBLIC_pubsub_cpp MyMsg_TypeSupportInterface;

         typedef MyMsg_TypeSupportInterface * MyMsg_TypeSupportInterface_ptr;
         typedef DDS_DCPSInterface_var < MyMsg_TypeSupportInterface> MyMsg_TypeSupportInterface_var;
         typedef DDS_DCPSInterface_out < MyMsg_TypeSupportInterface> MyMsg_TypeSupportInterface_out;


         class ROSIDL_TYPESUPPORT_OPENSPLICE_CPP_PUBLIC_pubsub_cpp MyMsg_DataWriter;

         typedef MyMsg_DataWriter * MyMsg_DataWriter_ptr;
         typedef DDS_DCPSInterface_var < MyMsg_DataWriter> MyMsg_DataWriter_var;
         typedef DDS_DCPSInterface_out < MyMsg_DataWriter> MyMsg_DataWriter_out;


         class ROSIDL_TYPESUPPORT_OPENSPLICE_CPP_PUBLIC_pubsub_cpp MyMsg_DataReader;

         typedef MyMsg_DataReader * MyMsg_DataReader_ptr;
         typedef DDS_DCPSInterface_var < MyMsg_DataReader> MyMsg_DataReader_var;
         typedef DDS_DCPSInterface_out < MyMsg_DataReader> MyMsg_DataReader_out;


         class ROSIDL_TYPESUPPORT_OPENSPLICE_CPP_PUBLIC_pubsub_cpp MyMsg_DataReaderView;

         typedef MyMsg_DataReaderView * MyMsg_DataReaderView_ptr;
         typedef DDS_DCPSInterface_var < MyMsg_DataReaderView> MyMsg_DataReaderView_var;
         typedef DDS_DCPSInterface_out < MyMsg_DataReaderView> MyMsg_DataReaderView_out;

         struct MyMsg_Seq_uniq_ {};
         typedef DDS_DCPSUFLSeq < MyMsg_, struct MyMsg_Seq_uniq_> MyMsg_Seq;
         typedef DDS_DCPSSequence_var < MyMsg_Seq> MyMsg_Seq_var;
         typedef DDS_DCPSSequence_out < MyMsg_Seq> MyMsg_Seq_out;
         class ROSIDL_TYPESUPPORT_OPENSPLICE_CPP_PUBLIC_pubsub_cpp MyMsg_TypeSupportInterface
         :
            virtual public DDS::TypeSupport
         { 
         public:
            typedef MyMsg_TypeSupportInterface_ptr _ptr_type;
            typedef MyMsg_TypeSupportInterface_var _var_type;

            static MyMsg_TypeSupportInterface_ptr _duplicate (MyMsg_TypeSupportInterface_ptr obj);
            DDS::Boolean _local_is_a (const char * id);

            static MyMsg_TypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
            static MyMsg_TypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
            static MyMsg_TypeSupportInterface_ptr _nil () { return 0; }
            static const char * _local_id;
            MyMsg_TypeSupportInterface_ptr _this () { return this; }


         protected:
            MyMsg_TypeSupportInterface () {};
            ~MyMsg_TypeSupportInterface () {};
         private:
            MyMsg_TypeSupportInterface (const MyMsg_TypeSupportInterface &);
            MyMsg_TypeSupportInterface & operator = (const MyMsg_TypeSupportInterface &);
         };

         class ROSIDL_TYPESUPPORT_OPENSPLICE_CPP_PUBLIC_pubsub_cpp MyMsg_DataWriter
         :
            virtual public DDS::DataWriter
         { 
         public:
            typedef MyMsg_DataWriter_ptr _ptr_type;
            typedef MyMsg_DataWriter_var _var_type;

            static MyMsg_DataWriter_ptr _duplicate (MyMsg_DataWriter_ptr obj);
            DDS::Boolean _local_is_a (const char * id);

            static MyMsg_DataWriter_ptr _narrow (DDS::Object_ptr obj);
            static MyMsg_DataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
            static MyMsg_DataWriter_ptr _nil () { return 0; }
            static const char * _local_id;
            MyMsg_DataWriter_ptr _this () { return this; }

            virtual DDS::LongLong register_instance (const MyMsg_& instance_data) = 0;
            virtual DDS::LongLong register_instance_w_timestamp (const MyMsg_& instance_data, const DDS::Time_t& source_timestamp) = 0;
            virtual DDS::Long unregister_instance (const MyMsg_& instance_data, DDS::LongLong handle) = 0;
            virtual DDS::Long unregister_instance_w_timestamp (const MyMsg_& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
            virtual DDS::Long write (const MyMsg_& instance_data, DDS::LongLong handle) = 0;
            virtual DDS::Long write_w_timestamp (const MyMsg_& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
            virtual DDS::Long dispose (const MyMsg_& instance_data, DDS::LongLong handle) = 0;
            virtual DDS::Long dispose_w_timestamp (const MyMsg_& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
            virtual DDS::Long writedispose (const MyMsg_& instance_data, DDS::LongLong handle) = 0;
            virtual DDS::Long writedispose_w_timestamp (const MyMsg_& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
            virtual DDS::Long get_key_value (MyMsg_& key_holder, DDS::LongLong handle) = 0;
            virtual DDS::LongLong lookup_instance (const MyMsg_& instance_data) = 0;

         protected:
            MyMsg_DataWriter () {};
            ~MyMsg_DataWriter () {};
         private:
            MyMsg_DataWriter (const MyMsg_DataWriter &);
            MyMsg_DataWriter & operator = (const MyMsg_DataWriter &);
         };

         class ROSIDL_TYPESUPPORT_OPENSPLICE_CPP_PUBLIC_pubsub_cpp MyMsg_DataReader
         :
            virtual public DDS::DataReader
         { 
         public:
            typedef MyMsg_DataReader_ptr _ptr_type;
            typedef MyMsg_DataReader_var _var_type;

            static MyMsg_DataReader_ptr _duplicate (MyMsg_DataReader_ptr obj);
            DDS::Boolean _local_is_a (const char * id);

            static MyMsg_DataReader_ptr _narrow (DDS::Object_ptr obj);
            static MyMsg_DataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
            static MyMsg_DataReader_ptr _nil () { return 0; }
            static const char * _local_id;
            MyMsg_DataReader_ptr _this () { return this; }

            virtual DDS::Long read (MyMsg_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take (MyMsg_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_w_condition (MyMsg_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long take_w_condition (MyMsg_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long read_next_sample (MyMsg_& received_data, DDS::SampleInfo& sample_info) = 0;
            virtual DDS::Long take_next_sample (MyMsg_& received_data, DDS::SampleInfo& sample_info) = 0;
            virtual DDS::Long read_instance (MyMsg_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take_instance (MyMsg_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_next_instance (MyMsg_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take_next_instance (MyMsg_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_next_instance_w_condition (MyMsg_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long take_next_instance_w_condition (MyMsg_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long return_loan (MyMsg_Seq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
            virtual DDS::Long get_key_value (MyMsg_& key_holder, DDS::LongLong handle) = 0;
            virtual DDS::LongLong lookup_instance (const MyMsg_& instance) = 0;

         protected:
            MyMsg_DataReader () {};
            ~MyMsg_DataReader () {};
         private:
            MyMsg_DataReader (const MyMsg_DataReader &);
            MyMsg_DataReader & operator = (const MyMsg_DataReader &);
         };

         class ROSIDL_TYPESUPPORT_OPENSPLICE_CPP_PUBLIC_pubsub_cpp MyMsg_DataReaderView
         :
            virtual public DDS::DataReaderView
         { 
         public:
            typedef MyMsg_DataReaderView_ptr _ptr_type;
            typedef MyMsg_DataReaderView_var _var_type;

            static MyMsg_DataReaderView_ptr _duplicate (MyMsg_DataReaderView_ptr obj);
            DDS::Boolean _local_is_a (const char * id);

            static MyMsg_DataReaderView_ptr _narrow (DDS::Object_ptr obj);
            static MyMsg_DataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
            static MyMsg_DataReaderView_ptr _nil () { return 0; }
            static const char * _local_id;
            MyMsg_DataReaderView_ptr _this () { return this; }

            virtual DDS::Long read (MyMsg_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take (MyMsg_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_w_condition (MyMsg_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long take_w_condition (MyMsg_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long read_next_sample (MyMsg_& received_data, DDS::SampleInfo& sample_info) = 0;
            virtual DDS::Long take_next_sample (MyMsg_& received_data, DDS::SampleInfo& sample_info) = 0;
            virtual DDS::Long read_instance (MyMsg_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take_instance (MyMsg_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_next_instance (MyMsg_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take_next_instance (MyMsg_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_next_instance_w_condition (MyMsg_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long take_next_instance_w_condition (MyMsg_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long return_loan (MyMsg_Seq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
            virtual DDS::Long get_key_value (MyMsg_& key_holder, DDS::LongLong handle) = 0;
            virtual DDS::LongLong lookup_instance (const MyMsg_& instance) = 0;

         protected:
            MyMsg_DataReaderView () {};
            ~MyMsg_DataReaderView () {};
         private:
            MyMsg_DataReaderView (const MyMsg_DataReaderView &);
            MyMsg_DataReaderView & operator = (const MyMsg_DataReaderView &);
         };

      }
   }
}




#endif
